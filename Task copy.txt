------
Часть 1. Теория.

1) Ознакомьтесь с документом "Low-code Entry Level". Данный документ описывает базовые понятия лоукодного сервиса, процесс создания простейшей датамодели лоукодного приложения.
На скриншотах приведен пример возможного взаимодействия с low-code платформой с помощью front-end компонента, но лишь в качестве примерной визуализации подобного процесса. Ожидается, что прочитав статью мы примерно поймете из каких первичных сущностей состоит модель условного лоукод приложения и как они могут взаимодействовать на уровне теории. - Готово

2) Ответьте, как вы понимаете термин «дата-модель»? - Сущность в базе данных, которая имеет свои поля (атрибуты) и ссылки на другие объекты/сущности/дата-модели.

3) Как вы понимаете термин «бизнес-процесс»? - Задача бизнеса внутри организации, также можно охарактеризовать как последовательность действий, которые чаще всего затрагивают несколько исполнителей. Изначально есть задача, а на выходе получается решение этой задачи в какой-либо форме.

------
Часть 2. Практика.

Ниже вам будет предложено несколько практических заданий разной направленности. Вы должны выполнить обязательное задание (номера 1, 4) и хотя бы одно необязательное (2 или 3), отмеченное звездочкой (*), в зависимости от того, какое из предложенных заданий наиболее пересекается с вашим предыдущим опытом. Выполнение всех заданий не возбраняется и является большим плюсом :) Предлагаемая вакансия в любом случае будет подразумевать многоплановое развитие по разным направлениям.



1) Создание базовой лоукодной модели (обязательное)

Предложите учебно-демонстрационную дата-модель простой лоу-код системы для управления поручениями и\или проектами и обоснуйте, почему ваша датамодель имеет именно такой набор сущностей\связей\атрибутов. 
- ОТВЕТ: Была реализована простая система: Пользователи, Задачи и Команды. Команда состоит из пользователей, которые уже могут создавать Задачи. Ссылка на диаграмму: https://drive.google.com/file/d/1w70o_IFVKDmVub-Tbb8B4mHiyS4MahEK/view?usp=sharing

В чем преимущества вашего приложения по сравнению с хардкодным аналогом? За основу вы можете взять системы Monday.com, trello.com, JIRA. 
- ОТВЕТ: Преимущество состоит в том, что Лоу-код системы являются расширяемыми и программируемыми, а хардкодные решения такими не являются или являются, но в меньшей степени.  

Дата-модель может быть представлена в виде диаграммы "окошечно-облачного" типа, таблицы etc., используйте любой инструмент, который наиболее точно, по вашему мнению, покажет как именно выглядит модель данных вашего лоу-код приложения.


2) Описание структуры бизнес-процесса* (опциональное) (аналитика)

Представьте, что закрытие задач определенного типа в вашем приложении требует аппрува от "проверяющего" + заказчика (с использованием электронной подписи).

Пример:
Фронтенд-разработчик Вася получил задачу по перекрашиванию кнопки из зеленого цвета в синий. Поверяющим задачи является Петя - тимлид Васи. Заказчиком изменения - Дмитрий, оунер продукта. 
Чтобы задача оказалась закрыта и Вася получил оплату за его выполнение, задача должна быть проверена Петей, заапрувлена Дмитрием (с использованием электронной подписи), затем информация должна дойти до бухгалтерии, где Васе оформят денежный перевод.

Опишите структуру бизнес-процесса (разбиение на этапы, с указанием Process Input и Process Output каждого этапа) по аппруву результатов задачи. Предложите ролевую модель для участников бизнес-процесса.

Ответ принимается в виде текстового документа любого вида, который пошагово описывает процесс + BPMN диаграммы, которая его визуализирует, также предоставляя сведения о разбивке процесса по ролевой модели.

- ОТВЕТ:
Учасники: Вася (программист), Петя (тимлид), Дима (заказчик), Настя (бухгалтер).

Этап 1: Инициализация и исполнение задачи Васей. Условий нет.
Process Input - Формулировка задачи (перекрашивание кнопки), ее сроки.
Process Output - Реализованная задача (в коде) и отправка pull request на апрув Пете.

Этап 2: Проверка задачи Петей. Условия: Вася отправил код на проверку.
Process Input - Код, который отправил Вася.
Process Output - Апрув и/или внесение корректировок в код со стороны Пети. Merge кода на тестовой ветке в GitLab, запуск деплоя.

Этап 3: Проверка задачи Димой. Условия: Апрув изменений Петей.
Process Input - Код залит на тестовый сервер и изменения отображены в интерфейсе.
Process Output - Апрув и/или внесение корректировок (Дима уведомляет Петю), создание электронной подписи.

Этап 4: Оплата работы Настей. Условия: Апрув Димы.
Process Input - Апрув от Димы, что изменения внесены корректно.
Process Output - Зачисление денежных средств на счет Васи.

Диаграмма доступна по ссылке: https://drive.google.com/file/d/1xpcQQIQt9CsoyYlzVztP_FQodJK7p9aa/view?usp=sharing 

Примечание:
Для описания бизнес-процесса можно использовать обычный русский язык, который описывает процесса в виде ПОСЛЕДОВАТЕЛЬНОСТИ элементов BPMN 2.0, при этом на ход выполнения процесса могут влиять как внешние СОБЫТИЯ, так и результаты выполнения конкретных операций (шлюзы).

3) Написание коллекции автоматического разворота лоукодной модели вашего приложения* (опциональное) (разработка, тестирование)

В соседней папке "CLI" вам предоставлены компоненты питон-приложения (cli_core.py, cli_lowcode.py), которое способно авторизовываться в нашей лоу-код системе (cli_rest_api_client.py) и выполнять команды, заранее записанные в .txt файл с помощью интерпретатора (cli_script.py).

Описание команд, которые могут быть использованы в .txt файле, предназначенном для интерпретатора, находится в README.txt

НЕ имея доступ к реальной системе, ознакомьтесь с ридми и напишите коллекцию по развороту вашего лоукод приложения в .txt файле, используя описанные в ридми команды. Не бойтесь экспериментировать и предполагать.

**Если вы обладаете питон-компетенциями, загляните в питон-приложение (cli_core.py, cli_lowcode.py) и, помимо написания .txt коллекции, попробуйте предложить питон-скрипт, использующий библиотеку cli_core, который создаст несколько сущностей из вашего приложения, минуя интерпретатор.

Примечание:
Да, вы не имеете доступ к реальной системе для проверки того, что вы написали. Мы ожидаем, что вы примените навыки абстрактного мышления и там, где вам недостаточно знаний о реальной системе попробуете предугадать ее поведение самостоятельно.

Ответ принимается в виде .txt файла CLI-коллекции, где используются команды из README.txt И .py файла, где используются функции библиотеки cli_core напрямую (если вы обладаете навыками Python)

- ОТВЕТ: 
https://github.com/preegnees/paragon_sobes

4) Менеджмент ресурсов (обязательное)

Представьте, что в последний момент перед релизом (3 дня до даты релиза) заказчик внезапно изменил требование к приложению, которое разрабатывало ваша команда. В веб-компоненте вашего лоукод-приложения по управлению проектами требуется поменять captcha компонент, чтобы использовалась yandex-captcha вместо google-captcha. Компания пошла навстречу заказчику и требует, чтобы вы выполнили задачу. Какие ресурсы вы запросите, как вы их распределите и какие заадчи поставите для выполнения ассайнмента и достижения цели? Как вы удостоверитесь, что несмотря на сжатые сроки весь остальной функционал приложения не пострадал?

- ОТВЕТ (главное, чтобы это не была пятница 🙃): 
1. Созвонюсь с разработчиком, который отвечал за этот код на фронте, и с разработчиком, который раньше работал с yandex-capcha (если такой есть). На звонке:
1.1. Узнаю про риски, которые могут быть, сколько времени займет изменение, а также узнаю насколько он уверен в своих силах.
1.2. Спрошу сможет ли он сказать, примерно, сколько времени потратит. Если не сможет, то запрошу время на выяснение ситуации, создам задачу для трека времени.

2. После получения необходимых данных (ниже в тексте), запрошу необходимое время и поставлю задачу (ниже в тексте). 
Необходимые данные:
2.1. Общие сроки на изменение (изучение Яндекс капчи разаработчиком и непосредственное внедрение).
2.2. Места, в которых изменения должны быть внедрены и отображены.
2.3. Риски, которые могут возникнуть. Например: могут упасть тесты и др. В зависимости от этого будут соотвествующие действия.
2.4. Уверенность разработчика в своих силах. 

3. Если все будет хорошо, то ставлю задачу (включая ее сроки):
"""
Необходимо заменить google-captcha на yandex-captcha в местах:
 ~ место 1,
 ~ место 2.

После изменений необходимо протестировать:
 ~ user flow 1,
 ~ user flow 2.
"""

4. Проверка:
4.1. После изменений на тест сервер, я самостоятельно проверяю эти user flows, чтобы лично убедиться. 
4.2. После этого прошу залить изменения на prod, после чего еще раз убеждаюсь, что все хорошо.

5. Уведомление заказчика. Пишу заказчику, что все готово. Если нужно показать, то показываю. Также не забываю сказать ему, что при различных проблемах, прошу не волноваться и сообщить мне о ней. - Это я говорю, так как задача была не запланирована.

Если же появляются проблемы, которые нельзя решить в сроки и/или которые не зависят от нас, то буду искать компромиссное решение.
